name: Terraform Unit Tests
description: Runs Terraform Unit Tests Via TerraTest

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        cache: true
        cache-dependency-path: test/go.sum

    - name: Unit Tests Log
      shell: bash
      if: success() || failure()
      working-directory: test
      run: |
        GOBIN=/usr/local/bin/ go install github.com/gruntwork-io/terratest/cmd/terratest_log_parser@latest
        go test -timeout 30m | tee test_output.log
        terratest_log_parser -testlog test_output.log -outputdir test_output

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      with:
        report_paths: test/*.xml
        check_name: Unit Test Report

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: test/*.xml

    - name: Report Unit Test Summary
      if: success() || failure()
      uses: actions/github-script@v6
      with:
        script: |
          let stdout = '';
          let stderr = '';

          const options = {};
          options.listeners = {
            stdout: (data) => {
              stdout += data.toString();
            },
            stderr: (data) => {
              stderr += data.toString();
            }
          };
          await exec.exec('cat', ['test/test_output/summary.log'], options);

          const output = `### Unit Tests Results
          <details><summary>Show Results</summary>

          \`\`\`\n
          ${stdout}
          \`\`\`

          </details>`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

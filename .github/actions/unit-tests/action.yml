name: Terraform Unit Tests
description: Runs Terraform Unit Tests Via TerraTest
inputs:
  GITHUB_TOKEN:
    description: Workflow GitHub Token (limited permissions)
    required: true

runs:
  using: "composite"
  steps:
    # - name: Setup Terratests
    #   shell: bash
    #   run: |
    #     go mod init github.com/${GITHUB_REPOSITORY}
    #     go mod tidy

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        cache: true
        cache-dependency-path: test/go.sum

    - name: Run tests
      uses: mathiasvr/command-output@v1
      id: tests
      if: success() || failure()
      with:
        run: |
          cd test
          go test -timeout 30m

    - name: Unit Tests Summary
      shell: bash
      if: success() || failure()
      working-directory: test
      run: |
        echo ${{ steps.tests.outputs.stdout }}
        echo ${{ steps.tests.outputs.stderr }}
        # go test -timeout 30m | grep -A 3000 'FAIL\|PASS' > testSummary.text

    # - name: Report Unit Test Summary
    #   if: success() || failure()
    #   uses: actions/github-script@v6
    #   with:
    #     github-token: ${{ inputs.GITHUB_TOKEN }}
    #     script: |
    #       let stdout = '';
    #       let stderr = '';

    #       const options = {};
    #       options.listeners = {
    #         stdout: (data) => {
    #           stdout += data.toString();
    #         },
    #         stderr: (data) => {
    #           stderr += data.toString();
    #         }
    #       };
    #       await exec.exec('cat', ['test/testSummary.text'], options);

    #       const output = `### Unit Tests Results
    #       <details><summary>Show Results</summary>

    #       \`\`\`\n
    #       ${stdout}
    #       \`\`\`

    #       </details>`;
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
